@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using System.Diagnostics
@using Dnet.Blazor.Infrastructure.Services.CssBuilder

@typeparam TValue

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<TValue>

@implements IDisposable

@inject IJSRuntime JSRuntime

<DnetFormField CurrentValue="@CurrentValueAsString"
			   Appearance="@Appearance"
			   PlaceHolder="@PlaceHolder"
			   FloatLabel="@FloatLabel"
			   HasFocus="@_hasFocus"
			   Disabled="@Disabled"
			   Label="@Label"
			   PrefixContent="@PrefixContent"
			   SufixContent="@SufixContent"
			   HintContent="HintContent"
			   ErrorContent="ErrorContent"
			   IsRequired="@IsRequired"
			   HasErrors="_hasErrors && EditContext.IsModified(FieldIdentifier)">
	<input @ref="__inputReference "
		   @attributes="AdditionalAttributes"
		   class="@_inputTextClass"
		   value="@BindConverter.FormatValue(CurrentValueAsString)"
		   @onchange="@((ChangeEventArgs __e) => CurrentValueAsString = __e.Value.ToString())"
		   @onfocus=@(() => Focus())
		   @onblur=@(() => Blur())
		   placeholder="@_placeHolder"
		   disabled="@Disabled" 
		   type="datetime"/>
</DnetFormField>


@code {

	[Parameter]
	public RenderFragment PrefixContent { get; set; }

	[Parameter]
	public RenderFragment SufixContent { get; set; }

	[Parameter]
	public RenderFragment HintContent { get; set; }

	[Parameter]
	public RenderFragment ErrorContent { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string PlaceHolder { get; set; }

	[Parameter]
	public string Hint { get; set; }

	[Parameter]
	public Appearance Appearance { get; set; }

	[Parameter]
	public FloatLabel FloatLabel { get; set; } = FloatLabel.AsUserTypes;

	[Parameter]
	public string Label { get; set; }

	[DisallowNull]
	public ElementReference? __inputReference { get; protected set; }

	[Parameter]
	public InputDateType Type { get; set; } = InputDateType.Date;

	[Parameter]
	public string ParsingErrorMessage { get; set; } = string.Empty;

	[Parameter]
	public bool IsRequired { get; set; }


	private bool _hasFocus { get; set; }

	private bool _hasErrors { get; set; }

	private string _placeHolder { get; set; }

	private string _inputTextClass =>
				new CssBuilder("mat-input-element")
					.AddClass("mat-form-field-autofill-control")
					.AddClass("cdk-text-field-autofill-monitored")
					.AddClass(CssClass)
				.Build();

	private const string DateFormat = "yyyy-MM-dd";                     // Compatible with HTML 'date' inputs
	private const string DateTimeLocalFormat = "yyyy-MM-ddTHH:mm:ss";   // Compatible with HTML 'datetime-local' inputs
	private const string MonthFormat = "yyyy-MM";                       // Compatible with HTML 'month' inputs
	private const string TimeFormat = "HH:mm:ss";                       // Compatible with HTML 'time' inputs

	private string _typeAttributeValue = default!;
	private string _format = default!;
	private string _parsingErrorMessage = default!;

	public DnetInputDate()
	{
		var type = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

		if (type != typeof(DateTime) &&
			type != typeof(DateTimeOffset) &&
			type != typeof(DateOnly) &&
			type != typeof(TimeOnly))
		{
			throw new InvalidOperationException($"Unsupported {GetType()} type param '{type}'.");
		}
	}

	protected override void OnParametersSet()
	{
		(_typeAttributeValue, _format, var formatDescription) = Type switch
		{
			InputDateType.Date => ("date", DateFormat, "date"),
			InputDateType.DateTimeLocal => ("datetime-local", DateTimeLocalFormat, "date and time"),
			InputDateType.Month => ("month", MonthFormat, "year and month"),
			InputDateType.Time => ("time", TimeFormat, "time"),
			_ => throw new InvalidOperationException($"Unsupported {nameof(InputDateType)} '{Type}'.")
		};

		_parsingErrorMessage = string.IsNullOrEmpty(ParsingErrorMessage)
			? $"The {{0}} field must be a {formatDescription}."
			: ParsingErrorMessage;
	}


	protected override void OnInitialized()
	{
		if (!string.IsNullOrEmpty(CurrentValueAsString)) _hasFocus = true;

		EditContext.OnFieldChanged += HandleOnValidationStateChanged;
	}

	private void Focus()
	{
		_hasFocus = true;
		_placeHolder = PlaceHolder;
		StateHasChanged();
	}

	private void Blur()
	{
		if (string.IsNullOrEmpty(CurrentValueAsString))
		{
			_hasFocus = false;
		}
		_placeHolder = string.Empty;

		StateHasChanged();
	}

	private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
	{
		_hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Count() > 0;
	}

	protected override string FormatValueAsString(TValue? value)
		=> value switch
		{
			DateTime dateTimeValue => BindConverter.FormatValue(dateTimeValue, _format, CultureInfo.InvariantCulture),
			DateTimeOffset dateTimeOffsetValue => BindConverter.FormatValue(dateTimeOffsetValue, _format, CultureInfo.InvariantCulture),
			DateOnly dateOnlyValue => BindConverter.FormatValue(dateOnlyValue, _format, CultureInfo.InvariantCulture),
			TimeOnly timeOnlyValue => BindConverter.FormatValue(timeOnlyValue, _format, CultureInfo.InvariantCulture),
			_ => string.Empty, // Handles null for Nullable<DateTime>, etc.
		};

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out result))
		{
			Debug.Assert(result != null);
			validationErrorMessage = null;
			return true;
		}
		else
		{
			validationErrorMessage = string.Format(CultureInfo.InvariantCulture, _parsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
			return false;
		}
	}
}
