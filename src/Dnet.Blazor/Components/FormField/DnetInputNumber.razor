@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Dnet.Blazor.Infrastructure.Services.CssBuilder

@typeparam TValue

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<TValue>

@implements IDisposable

@inject IJSRuntime JSRuntime

<DnetFormField CurrentValue="@CurrentValueAsString"
			   Appearance="@Appearance"
			   PlaceHolder="@PlaceHolder"
			   FloatLabel="@FloatLabel"
			   HasFocus="@_hasFocus"
			   Disabled="@Disabled"
			   Label="@Label"
			   PrefixContent="@PrefixContent"
			   SufixContent="@SufixContent"
			   HintContent="HintContent"
			   ErrorContent="ErrorContent"
			   IsRequired="@IsRequired"
			   HasErrors="_hasErrors && EditContext.IsModified(FieldIdentifier)">
	<input @ref="__inputReference "
		   @attributes="AdditionalAttributes"
		   step="_stepAttributeValue"
		   class="@_inputTextClass"
		   value="@BindConverter.FormatValue(CurrentValueAsString)"
		   @onchange="@((ChangeEventArgs __e) => CurrentValueAsString = __e.Value.ToString())"
		   @onfocus=@(() => Focus())
		   @onblur=@(() => Blur())
		   placeholder="@_placeHolder"
		   disabled="@Disabled"
		   type="number" />
</DnetFormField>


@code {

	[Parameter]
	public RenderFragment PrefixContent { get; set; }

	[Parameter]
	public RenderFragment SufixContent { get; set; }

	[Parameter]
	public RenderFragment HintContent { get; set; }

	[Parameter]
	public RenderFragment ErrorContent { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string PlaceHolder { get; set; }

	[Parameter]
	public string Hint { get; set; }

	[Parameter]
	public Appearance Appearance { get; set; }

	[Parameter]
	public FloatLabel FloatLabel { get; set; } = FloatLabel.AsUserTypes;

	[Parameter]
	public string Label { get; set; }

	[Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

	[DisallowNull]
	public ElementReference? __inputReference { get; protected set; }

	[Parameter]
	public bool IsRequired { get; set; }


	private bool _hasFocus { get; set; }

	private bool _hasErrors { get; set; }

	private string _placeHolder { get; set; }

	private string _inputTextClass =>
				new CssBuilder("mat-input-element")
					.AddClass("mat-form-field-autofill-control")
					.AddClass("cdk-text-field-autofill-monitored")
					.AddClass(CssClass)
				.Build();

	private static readonly string _stepAttributeValue = GetStepAttributeValue();

	private static string GetStepAttributeValue()
	{
		// Unwrap Nullable<T>, because InputBase already deals with the Nullable aspect
		// of it for us. We will only get asked to parse the T for nonempty inputs.
		var targetType = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);
		if (targetType == typeof(int) ||
			targetType == typeof(long) ||
			targetType == typeof(short) ||
			targetType == typeof(float) ||
			targetType == typeof(double) ||
			targetType == typeof(decimal))
		{
			return "any";
		}
		else
		{
			throw new InvalidOperationException($"The type '{targetType}' is not a supported numeric type.");
		}
	}


	protected override void OnInitialized()
	{
		if (!string.IsNullOrEmpty(CurrentValueAsString )) _hasFocus = true;

		EditContext.OnFieldChanged += HandleOnValidationStateChanged;
	}

	private void Focus()
	{
		_hasFocus = true;
		_placeHolder = PlaceHolder;
		StateHasChanged();
	}

	private void Blur()
	{
		if (string.IsNullOrEmpty(CurrentValueAsString ))
		{
			_hasFocus = false;
		}
		_placeHolder = string.Empty;

		StateHasChanged();
	}

	private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
	{
		_hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Count() > 0;
	}

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
	{
		if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.InvariantCulture, out result))
		{
			validationErrorMessage = null;
			return true;
		}
		else
		{
			validationErrorMessage = string.Format(CultureInfo.InvariantCulture, ParsingErrorMessage, DisplayName ?? FieldIdentifier.FieldName);
			return false;
		}
	}

	protected override string? FormatValueAsString(TValue? value)
	{
		// Avoiding a cast to IFormattable to avoid boxing.
		switch (value)
		{
			case null:
				return null;

			case int @int:
				return BindConverter.FormatValue(@int, CultureInfo.InvariantCulture);

			case long @long:
				return BindConverter.FormatValue(@long, CultureInfo.InvariantCulture);

			case short @short:
				return BindConverter.FormatValue(@short, CultureInfo.InvariantCulture);

			case float @float:
				return BindConverter.FormatValue(@float, CultureInfo.InvariantCulture);

			case double @double:
				return BindConverter.FormatValue(@double, CultureInfo.InvariantCulture);

			case decimal @decimal:
				return BindConverter.FormatValue(@decimal, CultureInfo.InvariantCulture);

			default:
				throw new InvalidOperationException($"Unsupported type {value.GetType()}");
		}
	}
}
