@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Diagnostics.CodeAnalysis
@using Dnet.Blazor.Infrastructure.Services.CssBuilder

@inherits Dnet.Blazor.Infrastructure.Forms.DnetInputBase<string>

@implements IDisposable

@inject IJSRuntime JSRuntime

<DnetFormField CurrentValue="@CurrentValue"
			   Appearance="@Appearance"
			   PlaceHolder="@PlaceHolder"
			   FloatLabel="@FloatLabel"
			   HasFocus="@_hasFocus"
			   Disabled="@Disabled"
			   Label="@Label"
			   PrefixContent="@PrefixContent"
               SufixContent="@SufixContent"
			   HintContent="HintContent"
			   IsRequired="@IsRequired"
			   HasErrors="_hasErrors && EditContext.IsModified(FieldIdentifier)"
			   ErrorContent="ErrorContent">
	<textarea @ref="__inputReference "
		   @attributes="AdditionalAttributes"
		   class="@_textareaClass"
		   value="@BindConverter.FormatValue(CurrentValue)"
		   @onchange="@((ChangeEventArgs __e) => CurrentValue = __e.Value.ToString())"
		   @onfocus=@(() => Focus())
		   @onblur=@(() => Blur())
		   placeholder="@_placeHolder"
		   disabled="@Disabled" />
</DnetFormField>


@code {

	[Parameter]
	public RenderFragment PrefixContent { get; set; }

	[Parameter]
	public RenderFragment SufixContent { get; set; }

	[Parameter]
	public RenderFragment HintContent { get; set; }

	[Parameter]
	public RenderFragment ErrorContent { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public string PlaceHolder { get; set; }

	[Parameter]
	public Appearance Appearance { get; set; }

	[Parameter]
	public FloatLabel FloatLabel { get; set; } = FloatLabel.AsUserTypes;

	[Parameter]
	public string Label { get; set; }

	[DisallowNull] public ElementReference? __inputReference { get; protected set; }

	[Parameter]
	public bool IsRequired { get; set; }

	private bool _hasFocus { get; set; }

	private bool _hasErrors { get; set; }

	private string _placeHolder { get; set; }

	private string _textareaClass =>
				new CssBuilder("mat-input-element")
					.AddClass("mat-form-field-autofill-control")
					.AddClass("cdk-text-field-autofill-monitored")
					.AddClass(CssClass)
				.Build();

	protected override void OnInitialized()
	{
		if (!string.IsNullOrEmpty(CurrentValue)) _hasFocus = true;
	}

	private void Focus()
	{
		_hasFocus = true;
		_placeHolder = PlaceHolder;
		StateHasChanged();
	}

	private void Blur()
	{
		if (string.IsNullOrEmpty(CurrentValue))
		{
			_hasFocus = false;
		}
		_placeHolder = string.Empty;

		if (EditContext != null) _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();

		StateHasChanged();
	}

	private void HandleOnValidationStateChanged(object sender, FieldChangedEventArgs? args)
	{
		if (EditContext != null) _hasErrors = EditContext.GetValidationMessages(FieldIdentifier).Any();
	}

	protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
	{
		result = value;
		validationErrorMessage = null;
		return true;
	}
}
